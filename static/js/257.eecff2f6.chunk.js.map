{"version":3,"file":"static/js/257.eecff2f6.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer 174c7d864c0b478cf762db237aebb993',\n      },\n    };\n\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=174c7d864c0b478cf762db237aebb993&language=en-US`,\n      options\n    )\n      .then(response => response.json())\n      .then(({ cast }) => setCast(cast))\n      .catch(err => console.error(err));\n  }, [movieId]);\n  return (\n    <div>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n              alt={actor.name}\n            />\n            <p>Name: {actor.name}</p>\n            <p>Character: {actor.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    setStatus('loading');\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer 174c7d864c0b478cf762db237aebb993',\n      },\n    };\n\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=174c7d864c0b478cf762db237aebb993&language=en-US&page=1`,\n      options\n    )\n      .then(response => response.json())\n      .then(({ results }) => {\n        setReviews(results);\n        setStatus('idle');\n      })\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  console.log(reviews);\n  return (\n    <div>\n      <ul>\n        {reviews.length === 0 && status === 'idle' && (\n          <p>We don't have any reviews for this movie</p>\n        )}\n        {reviews.map(review => (\n          <li key={review.id}>\n            <h3>Author: {review.author}</h3>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Button = styled(Link)`\n  display: block;\n  margin: 10px 0 10px 14px;\n  padding: 4px 5px;\n  text-decoration: none;\n  border: 1px solid grey;\n  border-radius: 3px;\n  width: 60px;\n  color: black;\n  height: 16px;\n  text-align: center;\n  font-size: 14px;\n\n  &:hover {\n    color: #848484;\n  }\n`;\n\nexport const Container = styled.div`\n  margin-left: 15px;\n  display: flex;\n  gap: 20px;\n`;\n\nexport const List = styled.ul`\n  padding-left: 20px;\n  margin-top: 10px;\n`;\n\nexport const AdditionalInfo = styled.div`\n  border-top: 1px solid #848484;\n  border-bottom: 1px solid #848484;\n  padding-left: 15px;\n  margin: 10px 0;\n`;\n\nexport const StyledLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n\n  &:hover {\n    color: #848484;\n  }\n`;\n","import { Outlet, useParams, useLocation } from 'react-router-dom';\nimport Cast from 'components/Cast/Cast.jsx';\nimport Reviews from 'components/Reviews/Reviews';\nimport { useEffect, useRef, useState, Suspense } from 'react';\nimport {\n  Button,\n  Container,\n  List,\n  AdditionalInfo,\n  StyledLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const location = useLocation();\n  const backlinkLocationRef = useRef(location.state?.from ?? '/movies');\n  // console.log(location);\n\n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n      },\n    };\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=174c7d864c0b478cf762db237aebb993&language=en-US`,\n      options\n    )\n      .then(response => response.json())\n      .then(response => setMovie(response))\n      .catch(err => console.error(err));\n  }, [movieId]);\n\n  const userScore = movie.vote_average?.toFixed(2);\n  // const genres = movie.genres?.map(genre => genre.name);\n  const year = new Date(movie.release_date).getFullYear();\n\n  // console.log(movie.genres.map(genre => genre.name));\n  return (\n    <div>\n      <Button to={backlinkLocationRef.current}>Go back</Button>\n      <Container>\n        <img\n          src={`https://image.tmdb.org/t/p/w300/${movie.poster_path}`}\n          alt={`\"${movie.title}\" movie poster`}\n        />\n        <div>\n          <h2>\n            {movie.title} ({year})\n          </h2>\n          <p>User Score: {userScore}</p>\n          <h3>Overview</h3>\n          <p>{movie.overview}</p>\n          <h3>Genres</h3>\n          <List>\n            {movie.genres?.map(genre => {\n              return <li key={genre.id}>{genre.name}</li>;\n            })}\n          </List>\n        </div>\n      </Container>\n      <AdditionalInfo>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <StyledLink to=\"cast\" element={<Cast />}>\n              Cast\n            </StyledLink>\n          </li>\n          <li>\n            <StyledLink to=\"reviews\" element={<Reviews></Reviews>}>\n              Reviews\n            </StyledLink>\n          </li>\n        </ul>\n      </AdditionalInfo>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","fetch","concat","method","headers","accept","Authorization","then","response","json","_ref","catch","err","console","error","_jsx","children","map","actor","_jsxs","src","profile_path","alt","name","character","id","reviews","setReviews","_useState3","_useState4","status","setStatus","results","log","length","review","author","content","Button","styled","Link","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","List","_templateObject3","AdditionalInfo","_templateObject4","StyledLink","_templateObject5","_location$state$from","_location$state","_movie$vote_average","_movie$genres","movie","setMovie","location","useLocation","backlinkLocationRef","useRef","state","from","userScore","vote_average","toFixed","year","Date","release_date","getFullYear","to","current","poster_path","title","overview","genres","genre","element","Cast","Reviews","Suspense","fallback","Outlet"],"sourceRoot":""}